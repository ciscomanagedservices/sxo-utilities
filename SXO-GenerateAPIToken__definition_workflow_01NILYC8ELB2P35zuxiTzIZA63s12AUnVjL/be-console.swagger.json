{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "REST API.",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/v1.1/instances": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler to get all Workflow Instances.",
        "operationId": "getAllWorkflowInstancesQueryParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "State",
            "description": "The state of workflow.",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "The search term to filter workflow by workflow display name",
            "name": "search",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Start",
            "description": "Start return list of instances from the number specified",
            "name": "start",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "Limit",
            "description": "Number of workflow instances will return by this request, must between 0-100",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "DateFrom",
            "description": "Return instances that started on after this date or on this date, example date is 2019-05-19T00:00:00Z",
            "name": "date_from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "DateTo",
            "description": "Return instances that are started on before this date or on this date, example date is 2019-05-19T00:00:00Z",
            "name": "date_to",
            "in": "query"
          },
          {
            "x-go-name": "RequestBody",
            "description": "An request body to submit.",
            "name": "request_body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WorkflowsInstancePostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/wfInstanceResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1.1/workflows": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow\nMandatory Query Param: limit -\u003e Non Negative limit.",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to get all workflows.",
        "operationId": "getAllWorkflowsPostQueryParams",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "IsAtomic",
            "description": "Provide true to return only atomic workflows and false for non atomic. Skip to return all workflows.",
            "name": "is_atomic",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "Comma separated list of search terms to filter based on workflow names",
            "name": "search",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "State",
            "description": "Comma separated list of workflow states to filter",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Number of workflows to return for this request",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Start",
            "description": "Return list of workflows from n'th workflow, n is start to be provided",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortBy",
            "description": "Return list of workflows in sorted order",
            "name": "sort_by",
            "in": "query"
          },
          {
            "x-go-name": "RequestBody",
            "description": "An request body to submit.",
            "name": "request_body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WorkflowsPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/calendars": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Calendars"
        ],
        "summary": "Handler to get all calendars.",
        "operationId": "listCalendars",
        "responses": {
          "200": {
            "$ref": "#/responses/calendarResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Calendar.",
        "tags": [
          "Calendars"
        ],
        "summary": "Handler to create a Calendar.",
        "operationId": "calendarCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The calendar to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/calendarDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/calendars/{calendar_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Calendars"
        ],
        "summary": "Handler to get a specific calendar.",
        "operationId": "getCalendarById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CalndarID",
            "description": "The definitionId of calendar",
            "name": "calendar_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/calendarDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Calendars"
        ],
        "summary": "Handler to update calendar. Allows partial update",
        "operationId": "calendarUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CalndarID",
            "description": "The definitionId of calendar",
            "name": "calendar_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The calendar to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/calendarDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Calendars"
        ],
        "summary": "Handler for delete calendar.",
        "operationId": "deleteCalendarById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CalndarID",
            "description": "The definitionId of calendar",
            "name": "calendar_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/categories": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Categories"
        ],
        "summary": "Handler to get all Categories.",
        "operationId": "listCategories",
        "responses": {
          "200": {
            "$ref": "#/responses/categoryResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Category.",
        "tags": [
          "Categories"
        ],
        "summary": "Handler to create a Category.",
        "operationId": "categoryCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The category to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/categoryDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/categories/{category_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Categories"
        ],
        "summary": "Handler to get a specific category.",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CategoryID",
            "description": "The definitionId of category",
            "name": "category_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/categoryDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin",
        "tags": [
          "Categories"
        ],
        "summary": "Handler to update category. Allows partial update",
        "operationId": "categoryUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CategoryID",
            "description": "The definitionId of category",
            "name": "category_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The category to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/categoryDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin",
        "tags": [
          "Categories"
        ],
        "summary": "Handler for delete Category.",
        "operationId": "deleteCategoryById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CategoryID",
            "description": "The definitionId of category",
            "name": "category_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/change_owner/{entity_id}": {
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin\nNote: LH_system_admin can change owner only for Roles in AO",
        "tags": [
          "ChangeOwner"
        ],
        "summary": "Handler to update of owner for any entity",
        "operationId": "changeOwnerUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EntityID",
            "description": "The entityID of entity",
            "name": "entity_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The change owner to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOwnerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/changeOwnerResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/events": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Events"
        ],
        "summary": "Handler to get all events information",
        "operationId": "GetAllEvents",
        "responses": {
          "200": {
            "$ref": "#/responses/eventsResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\n\nEither ViewSchemaID or Type or both in request body can be provided to create an Event.",
        "tags": [
          "Events"
        ],
        "summary": "Handler to create a event",
        "operationId": "EventCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The event to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/EventResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/events/{event_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Events"
        ],
        "summary": "ReadEventByID Handler to return Event infomration.",
        "operationId": "GeEventByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EventID",
            "description": "An ID of event",
            "name": "event_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EventResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Events"
        ],
        "summary": "Handler to update event",
        "operationId": "EventUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EventID",
            "description": "The eventID of Event",
            "name": "event_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The event to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EventResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Events"
        ],
        "summary": "Handler to delete event",
        "operationId": "DeleteEventByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EventID",
            "description": "An ID of event",
            "name": "event_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/instances": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler to get all Workflow Instances.",
        "operationId": "listWorkflowInstancesV1",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WoprkflowID",
            "description": "An ID of workflow.",
            "name": "workflow_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/wfInstanceResponseV1"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/instances/remove": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler to delete workflow instances in a batch.",
        "operationId": "WorkflowInstanceBatchDeletePostRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "worklfow instance IDs",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowInstanceBatchDeletePostReq"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/workflowInstanceDeleteResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/instances/summary": {
      "get": {
        "description": "Including total number of instances, total number of canceled, failed, running and successful instances\nAllowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler to get a summary of workflows instances.",
        "operationId": "instancesSummaryQueryParam",
        "responses": {
          "200": {
            "$ref": "#/responses/getInstancesSummaryResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/instances/{wf_instance_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler returning workflow instance information.",
        "operationId": "getWFInstanceById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WFInstanceID",
            "description": "The Id of worklfow instance",
            "name": "wf_instance_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Detailed",
            "description": "Whether to return all block instances for an instance if it has blocks\nIf false, will only return first block instance and a block count",
            "name": "detailed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowInstanceResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have RUN permission to given workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler to manage(cancel/pause/resume) a specific workflow instance",
        "operationId": "ManageWFInstanceByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WFInstanceID",
            "description": "The Id of worklfow instance",
            "name": "wf_instance_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Cancel",
            "description": "True for canceling an running/created status instance",
            "name": "cancel",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Pause",
            "description": "True for pause an instance has running status",
            "name": "pause",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Resume",
            "description": "True for resume an instance has paused status",
            "name": "resume",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "ReRun",
            "description": "True for run an instance has failed status",
            "name": "rerun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WFInstanceResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MANAGE permission to given workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler for delete workflow instance.",
        "operationId": "deleteWFInstanceById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WFInstanceID",
            "description": "The Id of worklfow instance",
            "name": "wf_instance_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/workflowInstanceDeleteResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/instances/{wf_instance_id}/actions/{action_instance_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler returning information about action's instance.",
        "operationId": "getWFActionInstanceById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WFInstanceID",
            "description": "The Id of worklfow instance",
            "name": "wf_instance_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "WFActionInstanceID",
            "description": "The Id of worklfow action instance",
            "name": "action_instance_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Iteration",
            "description": "Iteration number for block instance if it has blocks",
            "name": "iteration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowActionInstanceResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/instances/{wf_instance_id}/cancel": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have RUN permission to given workflow",
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Handler to cancel a specific workflow instance",
        "operationId": "CancelWFInstanceByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WFInstanceID",
            "description": "The Id of worklfow instance",
            "name": "wf_instance_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/cancelWFInstanceResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/references/{reference_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "References"
        ],
        "summary": "ReadReferences Handler to return information about references",
        "operationId": "referenceRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ReferenceID",
            "description": "Reference ID",
            "name": "reference_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BaseType",
            "description": "Reference ID's base type",
            "name": "base_type",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Uses",
            "description": "Return references which object uses",
            "name": "uses",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "UsedBy",
            "description": "Return references in which object are used by",
            "name": "used_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/referenceResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/runtime_users": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "RuntimeUsers"
        ],
        "summary": "Handler to get all runtimeusers.",
        "operationId": "listRuntimeUsers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Types",
            "description": "Type of Runtime user.",
            "name": "types",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/runtimeUserResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Runtime User.",
        "tags": [
          "RuntimeUsers"
        ],
        "summary": "Handler to create a runtimeuser.",
        "operationId": "runtimeUserCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The runtime user to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuntimeUserDefinitionPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/runtimeUserDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/runtime_users/{runtime_user_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "RuntimeUsers"
        ],
        "summary": "ReadRuntimeUserByID Handler to return information about runtime user.",
        "operationId": "getRuntimeUserById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "RuntimeUserID",
            "description": "The definitionId of runtimeuser",
            "name": "runtime_user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/runtimeUserDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "RuntimeUsers"
        ],
        "summary": "DeleteRuntimeUser Handler to delete runtime user using definition ID.",
        "operationId": "deleteRuntimeUserById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "RuntimeUserID",
            "description": "The definitionId of runtimeuser",
            "name": "runtime_user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "patch": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "RuntimeUsers"
        ],
        "summary": "UpdateRuntimeUser Handler to update runtime user.",
        "operationId": "runtimeUserUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "RuntimeUserID",
            "description": "he definitionId of runtimeuser",
            "name": "runtime_user_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The runtime user to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuntimeUserDefinitionPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/runtimeUserDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/schedules": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Schedules"
        ],
        "summary": "Handler to get all schedules.",
        "operationId": "listSchedules",
        "responses": {
          "200": {
            "$ref": "#/responses/scheduleResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Schedule.",
        "tags": [
          "Schedules"
        ],
        "summary": "Handler to creates a schedule.",
        "operationId": "scheduleCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The schedule to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleDefinitionPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/scheduleDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/schedules/{schedule_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Schedules"
        ],
        "summary": "Handler to get a specific schedule.",
        "operationId": "getScheduleById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "The definitionId of schedule",
            "name": "schedule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/scheduleDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Schedules"
        ],
        "summary": "Handler to updates a schedule. Allows partial update.",
        "operationId": "scheduleUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "The definitionId of schedule",
            "name": "schedule_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The schedule to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchedulePutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/scheduleDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Schedules"
        ],
        "summary": "Handler to delete a schedule.",
        "operationId": "deleteScheduleById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ScheduleID",
            "description": "The definitionId of schedule",
            "name": "schedule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/schemas": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_system_admin, LH_content_author, LH_operator",
        "tags": [
          "Schemas"
        ],
        "summary": "Handler returning information about all Schemas.",
        "operationId": "getAllSchemaQueryParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "BaseType",
            "description": "Base type of Schema.",
            "name": "base_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SchemaType",
            "description": "Type of Schema.",
            "name": "schema_type",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "Detailed",
            "description": "detailed Schema.",
            "name": "detailed",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "VariableType",
            "description": "variable_type of data_type schema.",
            "name": "variable_type",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "IsInternal",
            "description": "internal Schemas.",
            "name": "is_internal",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getSchemaAllResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_system_admin",
        "tags": [
          "Schemas"
        ],
        "summary": "Handler to create a schema template for all base_types.",
        "operationId": "schemaCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The schema to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaNewPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/schemaPostResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/schemas/{type_or_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_system_admin, LH_content_author, LH_operator",
        "tags": [
          "Schemas"
        ],
        "summary": "Handler returning information about Template.",
        "operationId": "getSchemaById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TypeORID",
            "description": "The type or Id of Schema",
            "name": "type_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SchemaType",
            "description": "Type of Schema. It can be \"data\" or \"view\".",
            "name": "schema_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDataViewSchemaResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_system_admin",
        "tags": [
          "Schemas"
        ],
        "summary": "handler method for updating adapter template/schema.",
        "operationId": "schemaUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TypeORID",
            "description": "The type or id of schema",
            "name": "type_or_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The schema to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemaPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getSchemaResponse"
          },
          "312": {
            "$ref": "#/responses/validationError"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_system_admin",
        "tags": [
          "Schemas"
        ],
        "summary": "Handler for delete Schema.",
        "operationId": "deleteSchemaById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TypeORID",
            "description": "The type or Id of Schema",
            "name": "type_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/share/{entity_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have MANAGE permission to given enitiy",
        "tags": [
          "ShareObjectPermissions"
        ],
        "summary": "Handler to get all object permission for entityID",
        "operationId": "ReadObjectSharePermissions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EntityID",
            "description": "An ID of entity (i.e workflow ID)",
            "name": "entity_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BaseType",
            "description": "Entity base type (The supported entitiy is only \"workflow\" for now)",
            "name": "base_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/shareObjectPermissionsResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have MANAGE permission to given enitiy",
        "tags": [
          "ShareObjectPermissions"
        ],
        "summary": "ShareObjectPermissions Handler to update object permissions of users and groups",
        "operationId": "UpdateObjectSharePermissions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EntityID",
            "description": "An ID of entity (i.e workflow ID)",
            "name": "entity_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BaseType",
            "description": "Entity base type (The supported entitiy is only \"workflow\" for now)",
            "name": "base_type",
            "in": "query",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "Share update object permissions payload.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareObjectPermissions"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/shareObjectPermissionsResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have MANAGE permission to given enitiy",
        "tags": [
          "ShareObjectPermissions"
        ],
        "summary": "Handler to share object permissions to users and groups",
        "operationId": "CreateObjectSharePermissions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "EntityID",
            "description": "An ID of entity (i.e workflow ID)",
            "name": "entity_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BaseType",
            "description": "Entity base type (The supported entitiy is only \"workflow\" for now)",
            "name": "base_type",
            "in": "query",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The object permissions payload to share.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareObjectPermissions"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/shareObjectPermissionsResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/table_types": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "TableTypes"
        ],
        "summary": "Handler to return get all table types",
        "operationId": "getAllTableType",
        "responses": {
          "200": {
            "$ref": "#/responses/tableTypeGetAllResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "TableTypes"
        ],
        "summary": "Handler to create Table Type.",
        "operationId": "tableTypeCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The request to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTableTypePostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/tableTypeGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/table_types/{table_type_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "TableTypes"
        ],
        "summary": "Handler to return Table type's information using ID.",
        "operationId": "getTableTypeById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TableTypeID",
            "description": "The Table Type ID",
            "name": "table_type_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tableTypeSchemaGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "TableTypes"
        ],
        "summary": "Handler to Update Table Type.",
        "operationId": "tableTypePutRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TableTypeID",
            "description": "The request to submit.",
            "name": "table_type_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The request to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTableTypePostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tableTypeGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "TableTypes"
        ],
        "summary": "Handler to delete Table type using ID.",
        "operationId": "delTableTypeById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TableTypeID",
            "description": "The Table Type ID",
            "name": "table_type_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/tables/{table_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Tables"
        ],
        "summary": "Handler to retrieve table rows.",
        "operationId": "tableGetRowsReqParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TableID",
            "description": "The Table ID",
            "name": "table_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset",
            "description": "Offset - number of rows to skip",
            "name": "offset",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Rows",
            "description": "Rows - number of rows to return",
            "name": "rows",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "Workflow ID if the table is a workflow table",
            "name": "workflow_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "WorkflowInstanceID",
            "description": "Workflow instance ID if the table is a workflow instance table",
            "name": "workflow_instance_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tableResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/target_groups": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "TargetGroups"
        ],
        "summary": "Handler returning all Target groups information",
        "operationId": "getAllTargetGroups",
        "responses": {
          "200": {
            "$ref": "#/responses/getAllTargetGroups"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Target Group.",
        "tags": [
          "TargetGroups"
        ],
        "summary": "Handler to create Target group.",
        "operationId": "targetGroupCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The target group to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/targetGroupGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/target_groups/{target_group_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "TargetGroups"
        ],
        "summary": "ReadTargetGroupByID Handler to return Target group infomration.",
        "operationId": "getTargetGroupById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TargetGroupID",
            "description": "An ID of target_group",
            "name": "target_group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/targetGroupGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "TargetGroups"
        ],
        "summary": "UpdateTarget Handler to update the target group",
        "operationId": "targetGroupUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TargetGroupID",
            "description": "The definitionId of target group",
            "name": "target_group_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The target group to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/targetGroupGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "TargetGroups"
        ],
        "summary": "Handler to delete Target group",
        "operationId": "deleteTargetGroupByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TargetGroupID",
            "description": "An ID of target_group",
            "name": "target_group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/targets": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Targets"
        ],
        "summary": "Handler returning all Targets.",
        "operationId": "getAllTargetQueryParams",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "IsInternal",
            "description": "internal Schemas.",
            "name": "is_internal",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Types",
            "description": "Types of Targets, comma seperated list if getting more than one type.",
            "name": "types",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/targetDefinitonAllResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Target.",
        "tags": [
          "Targets"
        ],
        "summary": "Handler to create a Target.",
        "operationId": "targetCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The target to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetDefinitionPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/targetDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/targets/{target_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Targets"
        ],
        "summary": "ReadTargetByID Handler to return Target infomration.",
        "operationId": "getTargetById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TargetID",
            "description": "The definitionId of target",
            "name": "target_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/targetDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Targets"
        ],
        "summary": "UpdateTarget Handler to update the target.",
        "operationId": "targetUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TargetID",
            "description": "The definitionId of target",
            "name": "target_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The target to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetDefinitionPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/targetDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Targets"
        ],
        "summary": "DeleteTarget handler for delete Target byId.",
        "operationId": "deleteTargetById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TargetID",
            "description": "The definitionId of target",
            "name": "target_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/tasks": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Tasks"
        ],
        "summary": "Handler to get all tasks.",
        "operationId": "getAllTasksQueryParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Owner",
            "description": "Comma separated list of owner IDs to filter by",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "description": "Comma separated list of search terms to filter based on task display names, and task response",
            "name": "search",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "State",
            "description": "Comma separated list of task states to filter",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Number of tasks to return for this request",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Start",
            "description": "Return list of tasks from n'th task, n is start to be provided",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Priority",
            "description": "Comma separated list of task priorities to filter",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "DueDate",
            "description": "filter tasks based on due date, an valid date will be 2019-05-15T12:00:00Z",
            "name": "due_date",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Requestor",
            "description": "Comma separated list of task requestors to filter",
            "name": "requestor",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Assignees",
            "description": "Comma separated list of task assignees to filter",
            "name": "assignees",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Response",
            "description": "Comma separated list of responses that assignees has responded",
            "name": "response",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "TaskType",
            "description": "Filter based on type of task",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getAllTasksResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/tasks/summary": {
      "get": {
        "description": "Including total number of tasks, not completed, due soon, overdue, expired and assigned to the user.\nAllowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given task",
        "tags": [
          "Tasks"
        ],
        "summary": "Handler to get a summary of tasks.",
        "operationId": "listTaskSummary",
        "responses": {
          "200": {
            "$ref": "#/responses/getTasksSummaryResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/tasks/{task_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Tasks"
        ],
        "summary": "Handler to get a specific task.",
        "operationId": "readTaskRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TaskID",
            "description": "Task ID",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/readTaskResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "patch": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Tasks"
        ],
        "summary": "Handler to update a task.",
        "operationId": "taskPatchRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TaskID",
            "description": "Task ID",
            "name": "task_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "Task request to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/readTaskResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/tasks/{task_id}/action": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Tasks"
        ],
        "summary": "Handler for an assignee of a task to take action on the task.",
        "operationId": "taskActionRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TaskID",
            "description": "Task ID",
            "name": "task_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "Task action to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TakeActionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/readTaskResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/tenants": {
      "get": {
        "description": "Allowed Role(s): LH_system_admin",
        "tags": [
          "Tenants"
        ],
        "summary": "Handler returning tenant and its sub tenants.",
        "operationId": "getAllTenants",
        "responses": {
          "200": {
            "$ref": "#/responses/tenantGetAllResponse"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/tenants/{tenant_id}": {
      "get": {
        "description": "Allowed Role(s): LH_system_admin",
        "tags": [
          "Tenants"
        ],
        "summary": "ReadTenantByID Handler to return tenant infomration.",
        "operationId": "getTenantById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TenantID",
            "description": "The id of tenant",
            "name": "tenant_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tenantResponse"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_system_admin",
        "tags": [
          "Tenants"
        ],
        "summary": "Handler to update a Tenant.",
        "operationId": "tenantUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TenantID",
            "description": "The id of Tenant",
            "name": "tenant_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The tenant to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tenantResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/update_table/{table_id}": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author",
        "tags": [
          "Tables"
        ],
        "summary": "Handler to update/add/delete rows",
        "operationId": "tableUpdateRowPostRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TableID",
            "description": "The Table ID",
            "name": "table_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "WorkflowID",
            "description": "Workflow ID if the table is a workflow table",
            "name": "workflow_id",
            "in": "query"
          },
          {
            "x-go-name": "UpdateRowRequest",
            "description": "rows for add/update/delete",
            "name": "rows",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableRowPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/validationError"
          },
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/variables": {
      "get": {
        "description": "Allowed Role(s) for Global variables: LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed Role(s) for ENV variables: LH_system_admin, LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Variables"
        ],
        "summary": "Handler to get all Variables.",
        "operationId": "listVariables",
        "responses": {
          "200": {
            "$ref": "#/responses/variableResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s) for Global variables: LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed Role(s) for ENV variables: LH_system_admin\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Variable.",
        "tags": [
          "Variables"
        ],
        "summary": "Handler to create a Variable.",
        "operationId": "variableCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "Variable request to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariablePostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/variableDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/variables/{variable_id}": {
      "get": {
        "description": "Allowed Role(s) for Global variables: LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed Role(s) for ENV variables: LH_system_admin, LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Variables"
        ],
        "summary": "Handler to return information about Variable.",
        "operationId": "getVariableById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "VariableID",
            "description": "Variable ID",
            "name": "variable_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/variableDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s) for Global variables: LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed Role(s) for ENV variables: LH_system_admin",
        "tags": [
          "Variables"
        ],
        "summary": "Handler to update Variable.",
        "operationId": "VariableUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "VariableID",
            "description": "Variable ID",
            "name": "variable_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "Variable request to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariablePutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/variableDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s) for Global variables: LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed Role(s) for ENV variables: LH_system_admin",
        "tags": [
          "Variables"
        ],
        "summary": "Handler to delete Variable byId.",
        "operationId": "deleteVariableById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "VariableID",
            "description": "Variable ID",
            "name": "variable_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/variables/{variable_id}/references": {
      "get": {
        "description": "Allowed Role(s) for Global variables: LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed Role(s) for ENV variables: LH_system_admin, LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator",
        "tags": [
          "Variables"
        ],
        "summary": "Handler to return Variable Referances by Variable Id",
        "operationId": "getVariableRefeById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "VariableID",
            "description": "Variable ID",
            "name": "variable_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/variableDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to get all workflows.",
        "operationId": "getAllWorkflowsQueryParamsV1",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "IsAtomic",
            "description": "Provide true if you need only atomic workflows.",
            "name": "is_atomic",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Categories",
            "description": "Comma separated list of category names to search for.",
            "name": "categories",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowResponseV1"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\n\nEither ViewSchemaID or Type or both in request body can be provided to create a Workflow.",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to create a workflow definition.",
        "operationId": "workflowCreateRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "The request to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workflowDefinitionPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/workflowDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/batch_get": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have view permission to the given list of workflows",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to retrieve a list of workflows",
        "operationId": "workflowBatchGetPostRequest",
        "parameters": [
          {
            "x-go-name": "RequestBody",
            "description": "List of workflows to retrieve",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowBatchGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/start": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_content_author, LH_operator\nAllowed User(s): Who have RUN permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to start workflow execution.",
        "operationId": "startWorkflowRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "ID of the workflow, to start workflow using id.",
            "name": "workflow_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "UniqueName",
            "description": "Unique Name of the workflow, to start workflow using unique_name of it",
            "name": "unique_name",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Sync",
            "description": "if true, starts workflow with sync.\nIf workflow execution takes more than 4 minutes, API returns the current status of the instance and workflow continue to run in the background\nAPI returns 200 Ok on successful completion of instance\nAPI return 201 Accepted if the workflow still in running state after 4 minutes",
            "name": "sync",
            "in": "query"
          },
          {
            "x-go-name": "RequestBody",
            "description": "The workflow to submit.",
            "name": "request_body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/startWorklfowPostRequestPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/runWorkflowResponse"
          },
          "202": {
            "$ref": "#/responses/runWorkflowResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "412": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/start_config": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have RUN permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to return required input parameters for the workflow.",
        "operationId": "workflowInputParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "UniqueName",
            "description": "The UniqueName of Workflow",
            "name": "unique_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/startWorklfowCfgResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/summary": {
      "get": {
        "description": "Including total number of workflows, total number of validated workflows and total number of draft workflows\nAllowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to get a summary of workflows.",
        "operationId": "worklowSummaryQueryParam",
        "responses": {
          "200": {
            "$ref": "#/responses/getWorkflowSummaryResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to return workflow information using workflow ID.",
        "operationId": "getWorkflowById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MODIFY/MANAGE permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to update the workflow.",
        "operationId": "workflowUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The request body to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowDefinitionPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowUpdateResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MANAGE permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to delete workflow using ID.",
        "operationId": "deleteWorkflowById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}/actions": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MODIFY/MANAGE permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to add new action to workflow.",
        "operationId": "addActionRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The definitionId of workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The request body to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddActionPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/actionDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}/actions/{action_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have atleast VIEW permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to return Workflow's action information using action ID.",
        "operationId": "getActionById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActionID",
            "description": "The Id of an Action",
            "name": "action_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/actionDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MODIFY/MANAGE permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to update an Action.",
        "operationId": "actionUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActionID",
            "description": "The Id of an Action",
            "name": "action_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "An action to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionDefinitionPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/actionPutResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MANAGE permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to delete an action from workflow byId.",
        "operationId": "deleteActionById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActionID",
            "description": "The Id of an Action",
            "name": "action_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/actionPutResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "patch": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MODIFY/MANAGE permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to move actions in workflow.",
        "operationId": "modifyActionStepsRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActionID",
            "description": "The Id of an Action",
            "name": "action_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "An request body to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/actionPutResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}/actions/{action_id}/duplicate": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to duplicate action.",
        "operationId": "duplicateActionById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActionID",
            "description": "The Id of an Action",
            "name": "action_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/actionDefinitonResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}/references": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have VIEW permission to given workflow",
        "tags": [
          "Workflows",
          "WorkflowVariableReferences"
        ],
        "summary": "Handler to return references for the workflow.",
        "operationId": "workflowObjRefRequestQueryParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActionID",
            "description": "The Id of Action",
            "name": "action_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "VariableID",
            "description": "The Id of Variable",
            "name": "variable_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "workflowObjRefResponse",
            "schema": {
              "$ref": "#/definitions/workflowObjRefResponse"
            }
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}/triggers": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have VIEW permission to given workflow",
        "tags": [
          "Triggers"
        ],
        "summary": "Handler to get all triggers information",
        "operationId": "getTriggersById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/triggerGetAllResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MANAGE permission to given workflow",
        "tags": [
          "Triggers"
        ],
        "summary": "Handler to get create a trigger for a workflow",
        "operationId": "triggerCreateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The trigger to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerPostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/triggerGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}/triggers/{trigger_id}": {
      "get": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author, LH_operator\nAllowed User(s): Who have VIEW permission to given workflow",
        "tags": [
          "Triggers"
        ],
        "summary": "Handler to get a trigger information by ID",
        "operationId": "getTriggerById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "TriggerID",
            "description": "The Id of Trigger",
            "name": "trigger_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/triggerGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "put": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MODIFY/MANAGE permission to given workflow",
        "tags": [
          "Triggers"
        ],
        "summary": "Handler to update trigger",
        "operationId": "triggerUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "TriggerID",
            "description": "The Id of Trigger",
            "name": "trigger_id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RequestBody",
            "description": "The trigger to submit.",
            "name": "request_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/triggerGetResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "409": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "delete": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MANAGE permission to given workflow",
        "tags": [
          "Triggers"
        ],
        "summary": "Handler to delete trigger",
        "operationId": "triggerDeleteRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "TriggerID",
            "description": "The Id of Trigger",
            "name": "trigger_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/v1/workflows/{workflow_id}/validate": {
      "post": {
        "description": "Allowed Role(s): LH_tenant_admin, LH_adapter_author, LH_content_author\nAllowed User(s): Who have MODIFY/MANAGE permission to given workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Handler to validate workflow.",
        "operationId": "validateWorkflowParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "WorkflowID",
            "description": "The Id of Workflow",
            "name": "workflow_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workflowValidationResponse"
          },
          "400": {
            "$ref": "#/responses/validationError"
          },
          "403": {
            "$ref": "#/responses/validationError"
          },
          "404": {
            "$ref": "#/responses/validationError"
          },
          "500": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessMeta": {
      "type": "object",
      "title": "AccessMeta ...",
      "properties": {
        "adapter": {
          "$ref": "#/definitions/AccessMetaType"
        },
        "deprecated": {
          "$ref": "#/definitions/Deprecated"
        },
        "disable_duplicate": {
          "type": "boolean",
          "x-go-name": "DisableDuplicate"
        },
        "is_integration": {
          "type": "boolean",
          "x-go-name": "IsIntegration"
        },
        "is_internal": {
          "type": "boolean",
          "x-go-name": "IsInternal"
        },
        "obsolete": {
          "$ref": "#/definitions/Obsolete"
        },
        "runtime_users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessMetaType"
          },
          "x-go-name": "RuntimeUsers"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessMetaType"
          },
          "x-go-name": "Targets"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "AccessMetaType": {
      "type": "object",
      "title": "AccessMetaType ...",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "ActionDefinitionGetAllPropsResponse": {
      "type": "object",
      "title": "ActionDefinitionGetAllPropsResponse ...",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionDefinitionGetAllPropsResponse"
          },
          "x-go-name": "Actions"
        },
        "adapter_id": {
          "type": "string",
          "x-go-name": "AdapterID"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionDefinitionGetAllPropsResponse"
          },
          "x-go-name": "Branches"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "invalid_properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "InvalidProperties"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "output_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "OutputSchema"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "skip_execution": {
          "type": "boolean",
          "x-go-name": "SkipExecution"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "subworkflow_valid": {
          "type": "boolean",
          "x-go-name": "SubWorkflowValid"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "valid": {
          "type": "boolean",
          "x-go-name": "Valid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionDefinitionGetResponse": {
      "type": "object",
      "title": "ActionDefinitionGetResponse ...",
      "properties": {
        "adapter_id": {
          "type": "string",
          "x-go-name": "AdapterID"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionDefinitionGetResponse"
          },
          "x-go-name": "Branches"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "invalid_properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "InvalidProperties"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "output_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "OutputSchema"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "property_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PropertySchema"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "skip_execution": {
          "type": "boolean",
          "x-go-name": "SkipExecution"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "subworkflow_valid": {
          "type": "boolean",
          "x-go-name": "SubWorkflowValid"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "valid": {
          "type": "boolean",
          "x-go-name": "Valid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionDefinitionPatchRequest": {
      "type": "object",
      "title": "ActionDefinitionPatchRequest ...",
      "required": [
        "id",
        "block_num"
      ],
      "properties": {
        "block_num": {
          "description": "The BlockNum to place an action",
          "type": "integer",
          "format": "int32",
          "x-go-name": "BlockNum"
        },
        "id": {
          "description": "An ID of an Action",
          "type": "string",
          "x-go-name": "DefinitionID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionDefinitionPostRequest": {
      "type": "object",
      "title": "ActionDefinitionPostRequest ...",
      "required": [
        "name",
        "properties"
      ],
      "properties": {
        "block_num": {
          "description": "The BlockNum of an Action",
          "type": "integer",
          "format": "int32",
          "x-go-name": "BlockNum"
        },
        "description": {
          "description": "The Description of an Action",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "The Name of an Action",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "The Properties of an Action, Value will be key value pairs",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "description": "View schmeaID of an Action",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "description": "The Name of an Action",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "valid": {
          "description": "value to Valid",
          "type": "boolean",
          "x-go-name": "Valid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionDefinitionPutRequest": {
      "type": "object",
      "title": "ActionDefinitionPutRequest ...",
      "properties": {
        "description": {
          "description": "Description of an Action",
          "type": "string",
          "x-go-name": "Description"
        },
        "invalid_properties": {
          "description": "InvalidProperties of an Action",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "InvalidProperties"
        },
        "name": {
          "description": "Name of an Action",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of an Action",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "title": {
          "description": "Title of an Action",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionDefinitionPutResponse": {
      "type": "object",
      "title": "ActionDefinitionPutResponse ...",
      "properties": {
        "action": {
          "$ref": "#/definitions/ActionDefinitionGetResponse"
        },
        "invalid_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InvalidActions"
        },
        "valid_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ValidActions"
        },
        "workflow_valid": {
          "type": "boolean",
          "x-go-name": "WorkflowValid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionFunc": {
      "type": "object",
      "title": "ActionFunc ...",
      "properties": {
        "is_microservice": {
          "type": "boolean",
          "x-go-name": "IsMicroservice"
        },
        "micro_service": {
          "$ref": "#/definitions/MicroService"
        },
        "serverless": {
          "$ref": "#/definitions/Serverless"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "ActionInstanceGetAllResponse": {
      "type": "object",
      "title": "ActionInstanceGetAllResponse ...",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionInstanceGetAllResponse"
          },
          "x-go-name": "Actions"
        },
        "adapter_id": {
          "type": "string",
          "x-go-name": "AdapterID"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionInstanceGetAllResponse"
          },
          "x-go-name": "Branches"
        },
        "blocks_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BranchesCount"
        },
        "definition_id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "id": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "skip_execution": {
          "type": "boolean",
          "x-go-name": "SkipExecution"
        },
        "status": {
          "$ref": "#/definitions/InstanceStatus"
        },
        "subworkflow_id": {
          "type": "string",
          "x-go-name": "SubWorkflowID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "workflow_id": {
          "type": "string",
          "x-go-name": "WorkflowID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionInstanceGetResponse": {
      "type": "object",
      "title": "ActionInstanceGetResponse ...",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionInstanceGetAllResponse"
          },
          "x-go-name": "Actions"
        },
        "adapter_id": {
          "type": "string",
          "x-go-name": "AdapterID"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionInstanceGetAllResponse"
          },
          "x-go-name": "Branches"
        },
        "definition_id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "ended_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "output": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Output"
        },
        "output_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "OutputSchema"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "property_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PropertySchema"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "skip_execution": {
          "type": "boolean",
          "x-go-name": "SkipExecution"
        },
        "started_by": {
          "type": "string",
          "x-go-name": "StartedBy"
        },
        "started_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartedOn"
        },
        "status": {
          "$ref": "#/definitions/InstanceStatus"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "workflow_id": {
          "type": "string",
          "x-go-name": "WorkflowID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionOutputVariable": {
      "type": "object",
      "title": "ActionOutputVariable ..",
      "properties": {
        "item_type": {
          "type": "string",
          "x-go-name": "ItemType"
        },
        "output_variable": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/OutputInfo"
          },
          "x-go-name": "Output"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "ActionPatchRequest": {
      "type": "object",
      "title": "ActionPatchRequest ...",
      "properties": {
        "action": {
          "$ref": "#/definitions/ActionDefinitionPatchRequest"
        },
        "previous_action": {
          "$ref": "#/definitions/ActionDefinitionPatchRequest"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ActionTableInfo": {
      "type": "object",
      "title": "ActionTableInfo ..",
      "properties": {
        "table_id": {
          "type": "string",
          "x-go-name": "TableID"
        },
        "table_type_id": {
          "type": "string",
          "x-go-name": "TableTypeID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "AddActionPostRequest": {
      "type": "object",
      "title": "AddActionPostRequest ...",
      "properties": {
        "action": {
          "$ref": "#/definitions/ActionDefinitionPostRequest"
        },
        "previous_action": {
          "$ref": "#/definitions/ActionDefinitionPatchRequest"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "AllReferences": {
      "type": "object",
      "properties": {
        "used_by": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectReference"
          },
          "x-go-name": "UsedBy"
        },
        "uses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectReference"
          },
          "x-go-name": "Uses"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "AssigneeResponse": {
      "type": "object",
      "title": "AssigneeResponse ...",
      "properties": {
        "assignee": {
          "type": "string",
          "x-go-name": "Assignee"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "response": {
          "type": "string",
          "x-go-name": "Response"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "CalendarGetAllResponse": {
      "type": "object",
      "title": "CalendarGetAllResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "calendar_type": {
          "type": "string",
          "x-go-name": "CalendarType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "CalendarID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "CalendarGetResponse": {
      "type": "object",
      "title": "CalendarGetResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "calendar_type": {
          "type": "string",
          "x-go-name": "CalendarType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "CalendarID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "type": "object",
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "CalendarPostRequest": {
      "description": "Either ViewSchemaID or Type or both can be provided to create a Calendar.",
      "type": "object",
      "title": "CalendarPostRequest ..",
      "required": [
        "name",
        "properties"
      ],
      "properties": {
        "description": {
          "description": "Description of Calendar",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of Calendar",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of Calendar",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "description": "ViewSchemaID of Calendar",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "description": "Title of Calendar",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Properties of Calendar",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "CalendarPutRequest": {
      "type": "object",
      "title": "CalendarPutRequest ...",
      "required": [
        "properties"
      ],
      "properties": {
        "description": {
          "description": "Description of Calendar",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of Calendar",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of Calendar",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "title": {
          "description": "Title of Calendar",
          "type": "string",
          "x-go-name": "Title"
        },
        "unique_name": {
          "description": "Properties of Category",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "CategoryGetResponse": {
      "type": "object",
      "title": "CategoryGetResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "category_type": {
          "$ref": "#/definitions/CategoryType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "CategoryID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "CategoryPostRequest": {
      "description": "Either ViewSchemaID or Type or both can be provided to create a Category.",
      "type": "object",
      "title": "CategoryPostRequest ...",
      "required": [
        "title"
      ],
      "properties": {
        "description": {
          "description": "Description of Category",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of Category",
          "type": "string",
          "x-go-name": "Name"
        },
        "schema_id": {
          "description": "ViewSchemaID of Category",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "description": "Title of Category",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Properties of Category",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "CategoryPutRequest": {
      "type": "object",
      "title": "CategoryPutRequest ...",
      "properties": {
        "description": {
          "description": "Description of Category",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of Category",
          "type": "string",
          "x-go-name": "Name"
        },
        "title": {
          "description": "Title of Category",
          "type": "string",
          "x-go-name": "Title"
        },
        "unique_name": {
          "description": "Properties of Category",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "CategoryType": {
      "type": "string",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "ChangeOwnerRequest": {
      "type": "object",
      "title": "ChangeOwnerRequest ...",
      "required": [
        "owner",
        "base_type"
      ],
      "properties": {
        "base_type": {
          "description": "BaseType of entity",
          "type": "string",
          "x-go-name": "BaseType"
        },
        "owner": {
          "description": "Owner ID of the entity",
          "type": "string",
          "x-go-name": "Owner"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ColumnData": {
      "type": "object",
      "title": "ColumnData ..",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "ColumnMapInfo": {
      "description": "ColumnMapInfo will be one entry in column map\n{\n\"table_type_id\": \"16bsMd7aS2mqII9n5bIe8EGIl39\",\n\"table_type_columns\": {\n\"\u003creferenced_table_type_id\u003e\": [\n{\n\"name\": \"id\",\n\"type\": \"number\"\n},\n{\n\"name\": \"name\",\n\"type\": \"string\"\n}\n]\n},\n\"parent_action_ids\": {\n\"\u003cparent_action_id/reference workflow/global var id\u003e\" : \"\u003creferenced_table_type_id\u003e\"\n},\n\"columns\": [\n{\n\"name\": \"id\",\n\"type\": \"number\"\n},\n{\n\"name\": \"name\",\n\"type\": \"string\"\n}\n]\n}",
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColumnData"
          },
          "x-go-name": "Columns"
        },
        "parent_action_ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "ParentMap"
        },
        "persist_output_as_table": {
          "type": "boolean",
          "x-go-name": "PersistOutput"
        },
        "table_type_columns": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ColumnData"
            }
          },
          "x-go-name": "TblTypeColumns"
        },
        "table_type_id": {
          "type": "string",
          "x-go-name": "TableTypeID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "CreateTableTypeGetResponse": {
      "type": "object",
      "title": "CreateTableTypeGetResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "data_type": {
          "type": "string",
          "x-go-name": "DataType"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "has_tables": {
          "type": "boolean",
          "x-go-name": "HasTables"
        },
        "id": {
          "type": "string",
          "x-go-name": "TableTypeID"
        },
        "inherits": {
          "type": "string",
          "x-go-name": "Inherits"
        },
        "max_column_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxColumnSize"
        },
        "max_columns": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxColumns"
        },
        "max_rows": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxRows"
        },
        "max_table_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTableSize"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "row_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "RowSchema"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "DefAccessMeta": {
      "type": "object",
      "title": "DefAccessMeta ...",
      "properties": {
        "is_integration": {
          "type": "boolean",
          "x-go-name": "IsIntegration"
        },
        "is_internal": {
          "type": "boolean",
          "x-go-name": "IsInternal"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "DefStatusDetails": {
      "type": "object",
      "title": "DefStatusDetails ...",
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "DefinitionState": {
      "description": "DefinitionState",
      "type": "string",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "DefinitionStatus": {
      "type": "object",
      "title": "DefinitionStatus ...",
      "properties": {
        "details": {
          "$ref": "#/definitions/DefStatusDetails"
        },
        "state": {
          "$ref": "#/definitions/DefinitionState"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "Deprecated": {
      "type": "object",
      "title": "Deprecated ...",
      "properties": {
        "deprecated_in": {
          "type": "string",
          "x-go-name": "DeprecatedIn"
        },
        "deprecated_message": {
          "type": "string",
          "x-go-name": "DeprecatedMessage"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "DueTaskDateInfo": {
      "type": "object",
      "title": "DueTaskDateInfo ...",
      "properties": {
        "is_relative_time": {
          "type": "boolean",
          "x-go-name": "IsRelativeTime"
        },
        "is_specified_date": {
          "type": "boolean",
          "x-go-name": "IsSpecifiedDate"
        },
        "relative_time": {
          "$ref": "#/definitions/RelativeTime"
        },
        "set_due_date": {
          "type": "boolean",
          "x-go-name": "SetDueDate"
        },
        "specified_date": {
          "type": "string",
          "x-go-name": "SpecifiedDate"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "DynamicMap": {
      "description": "DynamicMap ..",
      "type": "object",
      "title": "DynamicMap will have two individual map\nActionVariableMap will look like following:\n\"action_variable_map\": {\n\"\u003cactionID\u003e\": {\n\"jsonpath_queries_1\": {\n\"type\": \"array\",\n\"output_variable\":{\n\"script_query_name\":{\n\"name\": \"script_query_name\",\n\"type\":\"string\"\n},\n\"script_query_name_1\":{\n\"name\": \"script_query_name_1\",\n\"type\":\"string\"\n}\n}\n}\n\"jsonpath_queries_2\": {\n\"type\": \"object\",\n\"output_variable\":{\n\"query_name\":{\n\"name\": \"query_name\",\n\"type\":\"string\"\n}\n}\n}\n}\n}\nAction output table is for orchestrator to keep track of dynamic created table and table type\nit will look like following:\n\"action_output_table\": {\n\"\u003caction_definition_id\u003e\": {\n\"\u003caction_dynamic_property_1\u003e\": {\n\"table_id\": \"\",\n\"table_type_id\": \"\"\n},\n\"\u003caction_dynamic_property_2\u003e\": {\n\"table_id\": \"\",\n\"table_type_id\": \"\"\n}\n}\n}",
      "properties": {
        "action_output_table": {
          "description": "Action output table will be used for workflow instance\nDo not initialize for workflow definition",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionTableInfo"
            }
          },
          "x-go-name": "ActionOutputTable"
        },
        "action_variable_map": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionOutputVariable"
            }
          },
          "x-go-name": "ActionVariableMap"
        },
        "column_map": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ColumnMapInfo"
          },
          "x-go-name": "ColumnMap"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "Event": {
      "type": "object",
      "title": "Event ...",
      "required": [
        "properties"
      ],
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "EventID"
        },
        "invalid_properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "InvalidProperties"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "description": "Properties of event",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "status": {
          "$ref": "#/definitions/EventStatus"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "EventPostRequest": {
      "description": "EventPostRequest struct for events post api\nEither ViewSchemaID or Type or both can be provided to create an Event.",
      "type": "object",
      "required": [
        "title",
        "properties"
      ],
      "properties": {
        "description": {
          "description": "Description of Event",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of Event",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of event",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "description": "ViewSchemaID of Schedule",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "description": "Title of Event",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "EventPutRequest": {
      "type": "object",
      "title": "EventPutRequest ...",
      "required": [
        "title",
        "properties"
      ],
      "properties": {
        "description": {
          "description": "Description of Event",
          "type": "string",
          "x-go-name": "Description"
        },
        "properties": {
          "description": "Properties of event",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "title": {
          "description": "Title of Event",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "EventState": {
      "description": "EventState",
      "type": "string",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "EventStatus": {
      "type": "object",
      "title": "EventStatus ...",
      "properties": {
        "details": {
          "$ref": "#/definitions/DefStatusDetails"
        },
        "state": {
          "$ref": "#/definitions/EventState"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "GetAllTasksResponse": {
      "type": "object",
      "title": "An GetAllTasksResponse model.",
      "properties": {
        "_links": {
          "$ref": "#/definitions/PaginationLink"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetTaskResponse"
          },
          "x-go-name": "Results"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "GetApprovalTaskResponse": {
      "type": "object",
      "title": "An GetApprovalTaskResponse model.",
      "properties": {
        "approval_choices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ApprovalChoices"
        },
        "task_message": {
          "type": "string",
          "x-go-name": "ApprovalMessage"
        },
        "assignee_responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssigneeResponse"
          },
          "x-go-name": "AssigneeResponses"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Assignees"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "due_date": {
          "$ref": "#/definitions/LHTime"
        },
        "expiration_date": {
          "$ref": "#/definitions/LHTime"
        },
        "expiration_status": {
          "type": "string",
          "x-go-name": "ExpirationStatus"
        },
        "id": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "minimum_approvals": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MinimumApprovals"
        },
        "priority": {
          "$ref": "#/definitions/TaskPriority"
        },
        "response": {
          "type": "string",
          "x-go-name": "Response"
        },
        "status": {
          "$ref": "#/definitions/TaskStatus"
        },
        "subject_line": {
          "type": "string",
          "x-go-name": "SubjectLine"
        },
        "task_owner": {
          "type": "string",
          "x-go-name": "TaskOwner"
        },
        "task_requestor": {
          "type": "string",
          "x-go-name": "TaskRequestor"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "GetTaskResponse": {
      "type": "object",
      "title": "An GetTaskResponse model.",
      "properties": {
        "approval_choices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ApprovalChoices"
        },
        "assignee_responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssigneeResponse"
          },
          "x-go-name": "AssigneeResponses"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Assignees"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "due_date": {
          "$ref": "#/definitions/LHTime"
        },
        "expiration_date": {
          "$ref": "#/definitions/LHTime"
        },
        "expiration_status": {
          "type": "string",
          "x-go-name": "ExpirationStatus"
        },
        "id": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "minimum_approvals": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MinimumApprovals"
        },
        "priority": {
          "$ref": "#/definitions/TaskPriority"
        },
        "response": {
          "type": "string",
          "x-go-name": "Response"
        },
        "status": {
          "$ref": "#/definitions/TaskStatus"
        },
        "task_owner": {
          "type": "string",
          "x-go-name": "TaskOwner"
        },
        "task_requestor": {
          "type": "string",
          "x-go-name": "TaskRequestor"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "GitInfo": {
      "description": "GitInfo maintains information about the last Git Import",
      "type": "object",
      "properties": {
        "commit_hash": {
          "type": "string",
          "x-go-name": "CommitHash"
        },
        "commit_message": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "commited_by": {
          "type": "string",
          "x-go-name": "CommitedBy"
        },
        "commited_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CommitedOn"
        },
        "file_name": {
          "type": "string",
          "x-go-name": "FileName"
        },
        "target_id": {
          "type": "string",
          "x-go-name": "TargetID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "GroupPermission": {
      "type": "object",
      "title": "GroupPermission ...",
      "required": [
        "id",
        "permissions"
      ],
      "properties": {
        "id": {
          "description": "An ID of group",
          "type": "string",
          "x-go-name": "ID"
        },
        "permissions": {
          "description": "Permissions of the entity, Type of permissions can be: \"view\", \"run\", \"modify\", \"manage\"",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Permissions"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "InstStatusDetails": {
      "type": "object",
      "title": "InstStatusDetails ...",
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "InstanceState": {
      "description": "InstanceState",
      "type": "string",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "InstanceStatus": {
      "type": "object",
      "title": "InstanceStatus ...",
      "properties": {
        "details": {
          "$ref": "#/definitions/InstStatusDetails"
        },
        "state": {
          "$ref": "#/definitions/InstanceState"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "LHObjType": {
      "type": "string",
      "title": "LHObjType generated on 2019-11-01T10:14:43-07:00. DO NOT EDIT.",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/db-maps/entity"
    },
    "LHTime": {
      "description": "LHTime embeds time.Time",
      "type": "object",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "MicroService": {
      "type": "object",
      "title": "MicroService ...",
      "properties": {
        "end_point": {
          "type": "string",
          "x-go-name": "EndPoint"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "port": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Port"
        },
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "ObjectReference": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "Obsolete": {
      "type": "object",
      "title": "Obsolete ...",
      "properties": {
        "obsolete_from": {
          "type": "string",
          "x-go-name": "ObsoleteFrom"
        },
        "obsolete_message": {
          "type": "string",
          "x-go-name": "ObsoleteMessage"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "OutputInfo": {
      "type": "object",
      "title": "OutputInfo ..",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "PaginationLink": {
      "type": "object",
      "properties": {
        "next": {
          "type": "string",
          "x-go-name": "Next"
        },
        "prev": {
          "type": "string",
          "x-go-name": "Prev"
        },
        "self": {
          "type": "string",
          "x-go-name": "Self"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "RelativeTime": {
      "type": "object",
      "title": "RelativeTime ...",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "time_units": {
          "$ref": "#/definitions/TimeUnit"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "RuntimeUserDefinitionGetAllResponse": {
      "type": "object",
      "title": "RuntimeUserDefinitionGetAllResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "def_access_meta": {
          "$ref": "#/definitions/DefAccessMeta"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "RuntimeUserDefinitionGetResponse": {
      "type": "object",
      "title": "RuntimeUserDefinitionGetResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "def_access_meta": {
          "$ref": "#/definitions/DefAccessMeta"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "invalid_properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "InvalidProperties"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "RuntimeUserDefinitionPatchRequest": {
      "type": "object",
      "title": "RuntimeUserDefinitionPatchRequest ...",
      "properties": {
        "description": {
          "description": "Description of runtime user",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of runtime user",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of runtime user",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "title": {
          "description": "Title of runtime user",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "RuntimeUserDefinitionPostRequest": {
      "description": "Either ViewSchemaID or Type or both can be provided to create a Runtime User.",
      "type": "object",
      "title": "RuntimeUserDefinitionPostRequest ...",
      "required": [
        "name",
        "properties"
      ],
      "properties": {
        "description": {
          "description": "Description of runtime user",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of runtime user",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of runtime user",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "description": "ViewSchemaID of runtime user",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "description": "Title of runtime user",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ScheduleDefinitionPostRequest": {
      "description": "Either ViewSchemaID or Type or both can be provided to create a Schedule.",
      "type": "object",
      "title": "SchedulePostRequest ...",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of Schedule",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "$ref": "#/definitions/ScheduleProperties"
        },
        "schema_id": {
          "description": "ViewSchemaID of Schedule",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-name": "SchedulePostRequest",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ScheduleGetAllResponse": {
      "type": "object",
      "title": "ScheduleGetAllResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ScheduleID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ScheduleGetResponse": {
      "type": "object",
      "title": "ScheduleGetResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "ScheduleID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "$ref": "#/definitions/ScheduleProperties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "ScheduleProperties": {
      "type": "object",
      "properties": {
        "calendar": {
          "type": "string",
          "x-go-name": "CalendarID"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "interval_hours": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "IntervalHours"
        },
        "interval_minutes": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "IntervalMinutes"
        },
        "number_of_times": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NumberOfTimes"
        },
        "starttime": {
          "type": "string",
          "x-go-name": "Starttime"
        },
        "timezone": {
          "type": "string",
          "x-go-name": "Timezone"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "SchedulePutRequest": {
      "type": "object",
      "title": "SchedulePutRequest ...",
      "properties": {
        "name": {
          "description": "Name of Schedule",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "$ref": "#/definitions/ScheduleProperties"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "Schema": {
      "type": "object",
      "title": "Schema ...",
      "properties": {
        "access_meta": {
          "$ref": "#/definitions/AccessMeta"
        },
        "action_func": {
          "$ref": "#/definitions/ActionFunc"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Attributes"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "group": {
          "type": "string",
          "x-go-name": "Group"
        },
        "inherits": {
          "type": "string",
          "x-go-name": "Inherits"
        },
        "invisible": {
          "type": "boolean",
          "x-go-name": "Invisible"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "output_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "OutputSchema"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "property_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PropertySchema"
        },
        "schema_id": {
          "description": "An ID of schema",
          "type": "string",
          "x-go-name": "SchemaID"
        },
        "schema_type": {
          "description": "An ID of schema",
          "type": "string",
          "x-go-name": "SchemaType"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "variable_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "VariableSchema"
        },
        "variable_type": {
          "type": "boolean",
          "x-go-name": "VariableType"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "view_config": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "ViewConfig"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "SchemaByTypeNewPutRequest": {
      "type": "object",
      "title": "SchemaByTypeNewPutRequest ...",
      "properties": {
        "data_schema": {
          "$ref": "#/definitions/schemaPutRequest"
        },
        "view_schema": {
          "$ref": "#/definitions/schemaPutRequest"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "SchemaByTypeResponse": {
      "type": "object",
      "title": "SchemaByTypeResponse ...",
      "properties": {
        "data_schema": {
          "$ref": "#/definitions/Schema"
        },
        "view_schema": {
          "$ref": "#/definitions/Schema"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "SchemaNewPostRequest": {
      "type": "object",
      "title": "SchemaNewPostRequest ...",
      "required": [
        "data_schema"
      ],
      "properties": {
        "data_schema": {
          "$ref": "#/definitions/Schema"
        },
        "view_schema": {
          "$ref": "#/definitions/Schema"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "SchemaNewPostResponse": {
      "type": "object",
      "title": "SchemaNewPostResponse ...",
      "properties": {
        "data_schema": {
          "$ref": "#/definitions/Schema"
        },
        "view_schema": {
          "$ref": "#/definitions/Schema"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "Serverless": {
      "type": "object",
      "title": "Serverless ...",
      "properties": {
        "cloud_type": {
          "type": "string",
          "x-go-name": "CloudType"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "region": {
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "ShareObjectPermissions": {
      "type": "object",
      "title": "ShareObjectPermissions ...",
      "properties": {
        "groups": {
          "description": "List of groups permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupPermission"
          },
          "x-go-name": "GroupPermissions"
        },
        "users": {
          "description": "List of users permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserPermission"
          },
          "x-go-name": "UserPermissions"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "StartPointOption": {
      "type": "object",
      "title": "StartPointOption ..",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "StartWorkflowResponse": {
      "description": "StartWorkflowResponse model",
      "type": "object",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "definition_id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "id": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "status": {
          "$ref": "#/definitions/InstanceStatus"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "StartWorklfowConfigResponse": {
      "type": "object",
      "title": "StartWorklfowConfigResponse ...",
      "properties": {
        "input_variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGetAllResponse"
          },
          "x-go-name": "InputVariables"
        },
        "type_of_target_needed": {
          "type": "string",
          "x-go-name": "TargetType"
        },
        "wf_start_points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StartPointOption"
          },
          "x-go-name": "WF_StartPoints"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TableGetResponse": {
      "type": "object",
      "title": "TableGetResponse ...",
      "properties": {
        "data_type": {
          "type": "string",
          "x-go-name": "DataType"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRow"
          },
          "x-go-name": "Rows"
        },
        "rows_count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "RowsCount"
        },
        "table_id": {
          "type": "string",
          "x-go-name": "TableID"
        },
        "table_type_id": {
          "type": "string",
          "x-go-name": "TableTypeID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TablePostRequest": {
      "type": "object",
      "title": "TablePostRequest ...",
      "properties": {
        "max_column_size": {
          "description": "Specify the columns size of the Table",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxColumnSize"
        },
        "max_columns": {
          "description": "Specify the columns of the Table",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxColumns"
        },
        "max_rows": {
          "description": "Specify the number of rows for table",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxRows"
        },
        "max_table_size": {
          "description": "Specify the table size of the Table",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTableSize"
        },
        "name": {
          "description": "Name of the Table",
          "type": "string",
          "x-go-name": "Name"
        },
        "rows": {
          "description": "Add rows to the Table",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRow"
          },
          "x-go-name": "Rows"
        },
        "table_type_id": {
          "description": "ID of the Table type",
          "type": "string",
          "x-go-name": "TableTypeID"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TableRow": {
      "type": "object",
      "properties": {
        "column_data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "ColumnData"
        },
        "row_id": {
          "type": "string",
          "x-go-name": "RowID"
        },
        "suffix_id": {
          "type": "string",
          "x-go-name": "SuffixID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TableRowAttributeDescription": {
      "type": "object",
      "title": "TableRowAttributeDescription ...",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TableRowDescription": {
      "type": "object",
      "title": "TableRowDescription ...",
      "properties": {
        "input_table": {
          "type": "string",
          "x-go-name": "InputTable"
        },
        "row": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRowAttributeDescription"
          },
          "x-go-name": "Row"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TableTypeSchemaResponse": {
      "type": "object",
      "title": "TableTypeSchemaResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "data_type": {
          "type": "string",
          "x-go-name": "DataType"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "id": {
          "type": "string",
          "x-go-name": "SchemaID"
        },
        "inherits": {
          "type": "string",
          "x-go-name": "Inherits"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "property_schema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PropertySchema"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TakeActionRequest": {
      "type": "object",
      "title": "An TakeActionRequest model.",
      "required": [
        "response"
      ],
      "properties": {
        "message": {
          "description": "Response message",
          "type": "string",
          "x-go-name": "Message"
        },
        "response": {
          "description": "Response",
          "type": "string",
          "x-go-name": "Response"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TargetDefinitionGetAllResponse": {
      "type": "object",
      "title": "TargetDefinitionGetAllResponse ...",
      "properties": {
        "adapter_id": {
          "type": "string",
          "x-go-name": "AdapterID"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "def_access_meta": {
          "$ref": "#/definitions/DefAccessMeta"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "valid": {
          "type": "boolean",
          "x-go-name": "Valid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TargetDefinitionGetResponse": {
      "type": "object",
      "title": "TargetDefinitionGetResponse ...",
      "properties": {
        "adapter_id": {
          "type": "string",
          "x-go-name": "AdapterID"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "def_access_meta": {
          "$ref": "#/definitions/DefAccessMeta"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "invalid_properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "InvalidProperties"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "valid": {
          "type": "boolean",
          "x-go-name": "Valid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TargetDefinitionPostRequest": {
      "description": "Either ViewSchemaID or Type or both can be provided to create a Target.",
      "type": "object",
      "title": "TargetDefinitionPostRequest ...",
      "required": [
        "name",
        "properties"
      ],
      "properties": {
        "description": {
          "description": "Description of the target",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of the target",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of the target",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "description": "View SchemaID of the target",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "description": "Title of the target",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TargetDefinitionPutRequest": {
      "type": "object",
      "title": "TargetDefinitionPutRequest ...",
      "required": [
        "properties"
      ],
      "properties": {
        "description": {
          "description": "Description of the target",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of the target",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of the target",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "title": {
          "description": "Title of the target",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TargetGroupProperties": {
      "type": "object",
      "title": "TargetGroupProperties ...",
      "properties": {
        "criteria": {
          "type": "object",
          "x-go-name": "Criteria"
        },
        "include_all_targets": {
          "type": "boolean",
          "x-go-name": "IncludeAllTargets"
        },
        "matched_target_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "MatchedTargetIDs"
        },
        "selected_target_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SelectedTargetIDs"
        },
        "view_target_type": {
          "type": "string",
          "x-go-name": "ViewTargetType"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TargetGroupRequest": {
      "description": "Either ViewSchemaID or Type or both can be provided to create a TargetGroup.",
      "type": "object",
      "title": "TargetGroupRequest ...",
      "required": [
        "name",
        "title",
        "targets"
      ],
      "properties": {
        "criteria": {
          "description": "TargetTypes common attributes",
          "type": "object",
          "x-go-name": "Criteria"
        },
        "description": {
          "description": "Description of TargetGroup",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of TargetGroup",
          "type": "string",
          "x-go-name": "Name"
        },
        "schema_id": {
          "description": "ViewSchemaID of Schedule",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "targets": {
          "description": "Properties of Targets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetGroupProperties"
          },
          "x-go-name": "TargetGroupProperties"
        },
        "title": {
          "description": "Title of TargetGroup",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TaskDateInfo": {
      "type": "object",
      "title": "TaskDateInfo ...",
      "properties": {
        "is_relative_time": {
          "type": "boolean",
          "x-go-name": "IsRelativeTime"
        },
        "is_specified_date": {
          "type": "boolean",
          "x-go-name": "IsSpecifiedDate"
        },
        "relative_time": {
          "$ref": "#/definitions/RelativeTime"
        },
        "specified_date": {
          "type": "string",
          "x-go-name": "SpecifiedDate"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TaskPatchRequest": {
      "type": "object",
      "title": "An TaskPatchRequest model.",
      "properties": {
        "approval_choices": {
          "description": "Approval choices of task",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ApprovalChoices"
        },
        "task_message": {
          "description": "Approval messages of task",
          "type": "string",
          "x-go-name": "ApprovalMessage"
        },
        "assignees": {
          "description": "List of assignees of the task",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Assignees"
        },
        "description": {
          "description": "Task description",
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "description": "Task name",
          "type": "string",
          "x-go-name": "Name"
        },
        "due_date": {
          "$ref": "#/definitions/DueTaskDateInfo"
        },
        "expiration_date": {
          "$ref": "#/definitions/TaskDateInfo"
        },
        "expiration_status": {
          "description": "Task expiration status",
          "type": "string",
          "x-go-name": "ExpirationStatus"
        },
        "minimum_approvals": {
          "description": "Minimum Approvals for the task",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MinimumApprovals"
        },
        "priority": {
          "$ref": "#/definitions/TaskPriority"
        },
        "subject_line": {
          "description": "Task subject line",
          "type": "string",
          "x-go-name": "SubjectLine"
        },
        "task_owner": {
          "description": "Task owner",
          "type": "string",
          "x-go-name": "TaskOwner"
        },
        "task_requestor": {
          "description": "Task requestor",
          "type": "string",
          "x-go-name": "TaskRequestor"
        },
        "title": {
          "description": "Task title",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TaskPriority": {
      "description": "TaskPriority contains the Priority enum",
      "type": "string",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TaskState": {
      "description": "TaskState",
      "type": "string",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TaskStatus": {
      "type": "object",
      "title": "TaskStatus ...",
      "properties": {
        "details": {
          "$ref": "#/definitions/TaskStatusDetails"
        },
        "state": {
          "$ref": "#/definitions/TaskState"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TaskStatusDetails": {
      "type": "object",
      "title": "TaskStatusDetails ...",
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TasksSummaryResponse": {
      "type": "object",
      "title": "An TasksSummaryResponse model.",
      "properties": {
        "assigned_to_me": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AssignedToMe"
        },
        "completed": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Completed"
        },
        "due_soon": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DueSoon"
        },
        "expired": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Expired"
        },
        "overdue": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Overdue"
        },
        "total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "Tenant": {
      "type": "object",
      "title": "Tenant ...",
      "properties": {
        "available_version": {
          "type": "string",
          "x-go-name": "AvailableVersion"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "deleted": {
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "disable_auto_upgrade": {
          "type": "boolean",
          "x-go-name": "DisableAutoUpgrade"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "externalId": {
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "id": {
          "type": "string",
          "x-go-name": "TenantID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parent_id": {
          "type": "string",
          "x-go-name": "ParentID"
        },
        "status": {
          "$ref": "#/definitions/TenantStatus"
        },
        "tenant_name": {
          "type": "string",
          "x-go-name": "TenantName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TenantPutRequest": {
      "type": "object",
      "title": "TenantPutRequest ...",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "disable_auto_upgrade": {
          "type": "boolean",
          "x-go-name": "DisableAutoUpgrade"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "update_schemas": {
          "type": "boolean",
          "x-go-name": "UpdateSchemas"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TenantState": {
      "type": "string",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TenantStatus": {
      "type": "object",
      "title": "TenantStatus ...",
      "properties": {
        "details": {
          "$ref": "#/definitions/TenantStatusDetails"
        },
        "state": {
          "$ref": "#/definitions/TenantState"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TenantStatusDetails": {
      "type": "object",
      "title": "TenantStatusDetails ...",
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TimeUnit": {
      "type": "string",
      "title": "TimeUnit ...",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "Trigger": {
      "type": "object",
      "title": "Trigger ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "disabled": {
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "id": {
          "type": "string",
          "x-go-name": "TriggerID"
        },
        "invalid_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InvalidActions"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "ref_id": {
          "type": "string",
          "x-go-name": "RefID"
        },
        "status": {
          "$ref": "#/definitions/TriggerStatus"
        },
        "type": {
          "$ref": "#/definitions/TriggerType"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "valid_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ValidActions"
        },
        "workflow_id": {
          "type": "string",
          "x-go-name": "WorkflowID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TriggerPostRequest": {
      "description": "TriggerPostRequest struct for triggers post api",
      "type": "object",
      "required": [
        "name",
        "ref_id",
        "type"
      ],
      "properties": {
        "description": {
          "description": "Description of Trigger",
          "type": "string",
          "x-go-name": "Description"
        },
        "disabled": {
          "description": "Disabled",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "name": {
          "description": "Name of Trigger",
          "type": "string",
          "x-go-name": "Name"
        },
        "ref_id": {
          "description": "RefID, ID of an Event or ID of a Schedule",
          "type": "string",
          "x-go-name": "RefID"
        },
        "type": {
          "$ref": "#/definitions/TriggerType"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "version": {
          "description": "Version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TriggerPutRequest": {
      "description": "TriggerPutRequest struct for triggers post api",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "description": {
          "description": "Description of Trigger",
          "type": "string",
          "x-go-name": "Description"
        },
        "disabled": {
          "description": "Disabled",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "name": {
          "description": "Name of Trigger",
          "type": "string",
          "x-go-name": "Name"
        },
        "ref_id": {
          "description": "RefID, ID of an Event or ID of an schedule",
          "type": "string",
          "x-go-name": "RefID"
        },
        "type": {
          "$ref": "#/definitions/TriggerType"
        },
        "version": {
          "description": "Version of Trigger",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "TriggerStatus": {
      "type": "object",
      "title": "TriggerStatus ...",
      "properties": {
        "error_msg": {
          "type": "string",
          "x-go-name": "ErrorMsg"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "TriggerType": {
      "type": "string",
      "title": "TriggerType ...",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "UpdateTableRowPostRequest": {
      "type": "object",
      "properties": {
        "rows_to_be_added": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserTableRow"
          },
          "x-go-name": "RowsToAdd"
        },
        "rows_to_be_deleted": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserTableRow"
          },
          "x-go-name": "RowsToDelete"
        },
        "rows_to_be_updated": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserTableRow"
          },
          "x-go-name": "RowsToUpdate"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "UserPermission": {
      "type": "object",
      "title": "UserPermission ...",
      "required": [
        "id",
        "permissions"
      ],
      "properties": {
        "id": {
          "description": "An ID of user",
          "type": "string",
          "x-go-name": "ID"
        },
        "permissions": {
          "description": "Permissions of the entity, Type of permissions can be: \"view\", \"run\", \"modify\", \"manage\"",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Permissions"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "UserTableRow": {
      "type": "object",
      "properties": {
        "column_data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "ColumnData"
        },
        "previous_row_id": {
          "type": "string",
          "x-go-name": "PreviousRowID"
        },
        "previous_suffix_id": {
          "type": "string",
          "x-go-name": "PreviousSuffixID"
        },
        "row_id": {
          "type": "string",
          "x-go-name": "RowID"
        },
        "suffix_id": {
          "type": "string",
          "x-go-name": "SuffixID"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "Variable": {
      "type": "object",
      "title": "Variable ...",
      "required": [
        "schema_id"
      ],
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "id": {
          "description": "ID of variable",
          "type": "string",
          "x-go-name": "VariableID"
        },
        "object_type": {
          "$ref": "#/definitions/LHObjType"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "$ref": "#/definitions/VariableContent"
        },
        "schema_id": {
          "description": "View schema ID of variable, the value can be TargetTypeID for Table variables",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "table_id": {
          "description": "ID of table",
          "type": "string",
          "x-go-name": "TableID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "VariableContent": {
      "type": "object",
      "title": "VariableContent ...",
      "properties": {
        "description": {
          "description": "Description of variable",
          "type": "string",
          "x-go-name": "Description"
        },
        "is_required": {
          "description": "Is the variable Required\nUsed in input string and secure string variable, if it is true, then string can't be emptly",
          "type": "boolean",
          "x-go-name": "IsRequired"
        },
        "name": {
          "description": "Name of variable",
          "type": "string",
          "x-go-name": "Name"
        },
        "scope": {
          "description": "Scope of variable. Scope can be 'input', 'global', 'local', 'static' or 'workflow'",
          "type": "string",
          "x-go-name": "Scope"
        },
        "type": {
          "description": "Type of variable. Type can be 'datatype.boolean', 'datatype.string', 'datatype.number' or 'datatype.table'",
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "description": "Value of variable. Value can be a string, boolean, number or array",
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "VariableGetAllResponse": {
      "description": "VariableGetAllResponse model for variables",
      "type": "object",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "VariableID"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "$ref": "#/definitions/VariableContent"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "VariableGetResponse": {
      "description": "VariableGetResponse model for variables",
      "type": "object",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "VariableID"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "$ref": "#/definitions/VariableContent"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "VariablePostRequest": {
      "description": "VariablePostRequest model for variables\nEither ViewSchemaID or Type or both can be provided to create a Variable.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VariableContent"
        },
        "schema_id": {
          "description": "ViewSchemaID of variable",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Properties of variable",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "VariablePutRequest": {
      "description": "VariablePutRequest model for variables",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VariableContent"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "VariableStartPutRequest": {
      "type": "object",
      "title": "VariableStartPutRequest model for variables. Either id or name in the properties needs to be specified.",
      "properties": {
        "id": {
          "description": "Variable ID",
          "type": "string",
          "x-go-name": "VariableID"
        },
        "properties": {
          "$ref": "#/definitions/VariableContent"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WFInstancePaginationResponse": {
      "type": "object",
      "title": "WFInstancePaginationResponse ...",
      "properties": {
        "_links": {
          "$ref": "#/definitions/PaginationLink"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowInstanceGetAllResponse"
          },
          "x-go-name": "Results"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowDefinitionGetAllResponse": {
      "type": "object",
      "title": "WorkflowDefinitionGetAllResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Categories"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "metadata": {
          "$ref": "#/definitions/WorkflowMetadata"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Permissions"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "started_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastInstStartedOn"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "valid": {
          "type": "boolean",
          "x-go-name": "Valid"
        },
        "workflow_valid": {
          "type": "boolean",
          "x-go-name": "WorkflowValid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowDefinitionPutRequest": {
      "type": "object",
      "title": "WorkflowDefinitionPutRequest ...",
      "properties": {
        "categories": {
          "description": "Categories associated with the workflow",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Categories"
        },
        "description": {
          "description": "Description of the workflow",
          "type": "string",
          "x-go-name": "Description"
        },
        "metadata": {
          "$ref": "#/definitions/WorkflowMetadata"
        },
        "name": {
          "description": "Name of the workflow",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of the workflow",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "title": {
          "description": "Title of the workflow",
          "type": "string",
          "x-go-name": "Title"
        },
        "triggers": {
          "description": "Triggers of the workflow",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Trigger"
          },
          "x-go-name": "WFTriggers"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "valid": {
          "description": "Is valid",
          "type": "boolean",
          "x-go-name": "Valid"
        },
        "variables": {
          "description": "WFVariables of the workflow\n\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          },
          "x-go-name": "WFVariables"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowDefinitionPutResponse": {
      "description": "WorkflowDefinitionPutResponse model for workflow put request API",
      "type": "object",
      "properties": {
        "invalid_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InvalidActions"
        },
        "valid_actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ValidActions"
        },
        "workflow": {
          "$ref": "#/definitions/workflowDefinitionGetResponse"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowGetAllPaginationResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/PaginationLink"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowDefinitionGetAllResponse"
          },
          "x-go-name": "Results"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowInstanceBatchDeletePostReq": {
      "type": "object",
      "title": "WorkflowInstanceBatchDeletePostReq ...",
      "required": [
        "wf_instance_ids"
      ],
      "properties": {
        "wf_instance_ids": {
          "description": "worklfow instance IDs",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "WFInstanceIDs"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowInstanceGetAllResponse": {
      "type": "object",
      "title": "WorkflowInstanceGetAllResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "definition_id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "ended_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "root_workflow_id": {
          "type": "string",
          "x-go-name": "RootWorkflowID"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "started_by": {
          "type": "string",
          "x-go-name": "StartedBy"
        },
        "started_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartedOn"
        },
        "status": {
          "$ref": "#/definitions/InstanceStatus"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowInstanceGetResponse": {
      "type": "object",
      "title": "WorkflowInstanceGetResponse ...",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionInstanceGetAllResponse"
          },
          "x-go-name": "Actions"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "definition_id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "dynamic_map": {
          "$ref": "#/definitions/DynamicMap"
        },
        "ended_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndedOn"
        },
        "id": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "root_workflow_id": {
          "type": "string",
          "x-go-name": "RootWorkflowID"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "started_by": {
          "type": "string",
          "x-go-name": "StartedBy"
        },
        "started_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartedOn"
        },
        "status": {
          "$ref": "#/definitions/InstanceStatus"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          },
          "x-go-name": "WFVariables"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowMetadata": {
      "description": "WorkflowMetadata maintains miscellaneous metadata for the workflow",
      "type": "object",
      "properties": {
        "git_info": {
          "$ref": "#/definitions/GitInfo"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/vendor/bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/lds-microservice/models"
    },
    "WorkflowValidationGetResponse": {
      "type": "object",
      "title": "WorkflowValidationGetResponse ...",
      "properties": {
        "invalid_action_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InvalidStepIDs"
        },
        "total_actions": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TotalSteps"
        },
        "total_valid": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TotalValid"
        },
        "workflow_valid": {
          "type": "boolean",
          "x-go-name": "WorkflowValid"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowsInstancePostRequest": {
      "type": "object",
      "title": "WorkflowsInstancePostRequest ...",
      "properties": {
        "owner": {
          "description": "list of owner IDs to filter by\nin: body",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Owner"
        },
        "workflow_ids": {
          "description": "List of workflows to retrieve\n\nin: body",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "WorkflowIDs"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "WorkflowsPostRequest": {
      "type": "object",
      "title": "WorkflowsPostRequest ...",
      "properties": {
        "categories": {
          "description": "list of categories to get for.\nin: body",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Categories"
        },
        "owner": {
          "description": "list of owner IDs to filter by\nin: body",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Owner"
        }
      },
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "createTableTypePostRequest": {
      "type": "object",
      "title": "CreateTableTypePostRequest ...",
      "properties": {
        "columns": {
          "description": "Specify columns for table type",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "x-go-name": "ConsoleCols"
        },
        "description": {
          "description": "Description of the Table Type",
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "description": "Name of the Table Type",
          "type": "string",
          "x-go-name": "Name"
        },
        "inherits": {
          "description": "Inherits",
          "type": "string",
          "x-go-name": "Inherits"
        },
        "max_column_size": {
          "description": "Define column size",
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxColumnSize"
        },
        "max_columns": {
          "description": "Define Max columns for Table Type",
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxColumns"
        },
        "max_rows": {
          "description": "Define MaxRows for Table Type",
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxRows"
        },
        "max_table_size": {
          "description": "Define the table size",
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxTableSize"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        }
      },
      "x-go-name": "CreateTableTypePostRequest",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "createTableTypePutRequest": {
      "type": "object",
      "title": "CreateTableTypePutRequest ...",
      "properties": {
        "columns": {
          "description": "Specify columns for table type",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "x-go-name": "ConsoleCols"
        },
        "description": {
          "description": "Description of the Table Type",
          "type": "string",
          "x-go-name": "Description"
        },
        "display_name": {
          "description": "Name of the Table Type",
          "type": "string",
          "x-go-name": "Name"
        },
        "inherits": {
          "description": "Inherits",
          "type": "string",
          "x-go-name": "Inherits"
        },
        "max_column_size": {
          "description": "Define column size",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxColumnSize"
        },
        "max_columns": {
          "description": "Define Max columns for Table Type",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxColumns"
        },
        "max_rows": {
          "description": "Define MaxRows for Table Type",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxRows"
        },
        "max_table_size": {
          "description": "Define the table size",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTableSize"
        }
      },
      "x-go-name": "CreateTableTypePutRequest",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "instancesSummaryResponse": {
      "type": "object",
      "title": "An InstancesSummaryResponse model.",
      "properties": {
        "canceled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Canceled"
        },
        "failed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Failed"
        },
        "paused": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Paused"
        },
        "running": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Running"
        },
        "success": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Success"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        },
        "waiting_for_event": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WaitingForEvent"
        }
      },
      "x-go-name": "InstancesSummaryResponse",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "schemaPutRequest": {
      "type": "object",
      "title": "A SchemaPutRequest for one or more schema templates.",
      "properties": {
        "access_meta": {
          "$ref": "#/definitions/AccessMeta"
        },
        "action_func": {
          "$ref": "#/definitions/ActionFunc"
        },
        "attributes": {
          "description": "Attributes information",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Attributes"
        },
        "description": {
          "description": "The Description of Schema",
          "type": "string",
          "x-go-name": "Description"
        },
        "group": {
          "description": "Group of Schema",
          "type": "string",
          "x-go-name": "Group"
        },
        "id": {
          "description": "View ID of Schema",
          "type": "string",
          "x-go-name": "SchemaID"
        },
        "inherits": {
          "description": "The value of Inherits",
          "type": "string",
          "x-go-name": "Inherits"
        },
        "invisible": {
          "description": "The value of Invisible",
          "type": "boolean",
          "x-go-name": "Invisible"
        },
        "is_internal": {
          "description": "The value of IsInternal",
          "type": "boolean",
          "x-go-name": "IsInternal"
        },
        "name": {
          "description": "The name of Schema",
          "type": "string",
          "x-go-name": "Name"
        },
        "output_schema": {
          "description": "The Output of Schema",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "OutputSchema"
        },
        "property_schema": {
          "description": "The Property Schema",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PropertySchema"
        },
        "title": {
          "description": "The Title of Schema",
          "type": "string",
          "x-go-name": "Title"
        },
        "variable_schema": {
          "description": "The Variable Schema",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "VariableSchema"
        },
        "version": {
          "description": "The Version of Schema",
          "type": "string",
          "x-go-name": "Version"
        },
        "view_config": {
          "description": "View config settings of Schema",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "ViewConfig"
        }
      },
      "x-go-name": "SchemaPutRequest",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "startWorklfowPostRequestPayload": {
      "description": "StartWorklfowPostRequestPayload model",
      "type": "object",
      "properties": {
        "input_variables": {
          "description": "Input Variables information to start the workflow.\n\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableStartPutRequest"
          },
          "x-go-name": "Variables"
        },
        "runtime_user_id": {
          "description": "The runtime user ID to submit.\n\nin: body",
          "type": "string",
          "x-go-name": "WFRuntimeUserID"
        },
        "start_point": {
          "description": "The workflow start point.\n\nin: body",
          "type": "string",
          "x-go-name": "WFStartPoint"
        },
        "target_id": {
          "description": "The target ID to submit.\n\nin: body",
          "type": "string",
          "x-go-name": "WFTargetID"
        }
      },
      "x-go-name": "StartWorklfowPostRequestPayload",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "targetGroupGetAllResponse": {
      "type": "object",
      "title": "TargetGroupGetAllResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "TargetGroupID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-name": "TargetGroupGetAllResponse",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "targetGroupGetResponse": {
      "type": "object",
      "title": "TargetGroupGetResponse ...",
      "properties": {
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "criteria": {
          "type": "object",
          "x-go-name": "Criteria"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "TargetGroupID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetGroupProperties"
          },
          "x-go-name": "TargetGroupProperties"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-name": "TargetGroupGetResponse",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "workflowDefinitionGetResponse": {
      "type": "object",
      "title": "WorkflowDefinitionGetResponse ...",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionDefinitionGetAllPropsResponse"
          },
          "x-go-name": "Actions"
        },
        "base_type": {
          "type": "string",
          "x-go-name": "BaseType"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Categories"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "dynamic_map": {
          "$ref": "#/definitions/DynamicMap"
        },
        "id": {
          "type": "string",
          "x-go-name": "DefinitionID"
        },
        "invalid_properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "InvalidProperties"
        },
        "metadata": {
          "$ref": "#/definitions/WorkflowMetadata"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Permissions"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "started_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastInstStartedOn"
        },
        "status": {
          "$ref": "#/definitions/DefinitionStatus"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "updated_on": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedOn"
        },
        "valid": {
          "type": "boolean",
          "x-go-name": "Valid"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          },
          "x-go-name": "WFVariables"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "workflow_valid": {
          "type": "boolean",
          "x-go-name": "WorkflowValid"
        }
      },
      "x-go-name": "WorkflowDefinitionGetResponse",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "workflowDefinitionPostRequest": {
      "description": "Either ViewSchemaID or Type or both can be provided to create a Workflow.",
      "type": "object",
      "title": "WorkflowDefinitionPostRequest ...",
      "required": [
        "name",
        "properties"
      ],
      "properties": {
        "categories": {
          "description": "Categories associated with the workflow",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Categories"
        },
        "description": {
          "description": "Description of the Wrokflow",
          "type": "string",
          "x-go-name": "Description"
        },
        "metadata": {
          "$ref": "#/definitions/WorkflowMetadata"
        },
        "name": {
          "description": "Name of the Workflow",
          "type": "string",
          "x-go-name": "Name"
        },
        "properties": {
          "description": "Properties of the workflow",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Properties"
        },
        "schema_id": {
          "description": "View SchemaID of the workflow",
          "type": "string",
          "x-go-name": "ViewSchemaID"
        },
        "title": {
          "description": "Title of the Workflow",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unique_name": {
          "description": "Uniquename",
          "type": "string",
          "x-go-name": "UniqueName"
        },
        "valid": {
          "description": "value of Valid",
          "type": "boolean",
          "x-go-name": "Valid"
        },
        "variables": {
          "description": "WFVariables of the workflow\n\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          },
          "x-go-name": "WFVariables"
        }
      },
      "x-go-name": "WorkflowDefinitionPostRequest",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "workflowObjRefResponse": {
      "type": "object",
      "title": "WorkflowObjRefResponse response model.",
      "properties": {
        "actions": {
          "description": "in: body",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Actions"
        }
      },
      "x-go-name": "WorkflowObjRefResponse",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    },
    "workflowSummaryResponse": {
      "type": "object",
      "title": "An WorkflowSummaryResponse model.",
      "properties": {
        "invalid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Invalid"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        },
        "valid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Valid"
        }
      },
      "x-go-name": "WorkflowSummaryResponse",
      "x-go-package": "bitbucket-eng-sjc1.cisco.com/bitbucket/nextg/be-console/models"
    }
  },
  "responses": {
    "EventResponse": {
      "description": "An EventResponse response model\n\nThis is used for returning a response with a single event as body",
      "schema": {
        "$ref": "#/definitions/Event"
      }
    },
    "WFInstanceResponse": {
      "description": "An ManageInstanceResponse response model\n\nReturn instance status",
      "headers": {
        "status": {
          "type": "string"
        }
      }
    },
    "actionDefinitonResponse": {
      "description": "An ActionDefinitonResponse response model\n\nThis is used for returning a response of action definiton as a body",
      "schema": {
        "$ref": "#/definitions/ActionDefinitionGetResponse"
      }
    },
    "actionPutResponse": {
      "description": "An ActionPutResponse response model\n\nThis is used for returning a response of an action as a body",
      "schema": {
        "$ref": "#/definitions/ActionDefinitionPutResponse"
      }
    },
    "calendarDefinitonResponse": {
      "description": "An CalendarDefinitonResponse response model\n\nThis is used to retutn a response of Calendar as a body",
      "schema": {
        "$ref": "#/definitions/CalendarGetResponse"
      }
    },
    "calendarResponse": {
      "description": "An CalendarResponse response model\n\nThis is used to return response with a single calendar as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CalendarGetAllResponse"
        }
      }
    },
    "cancelWFInstanceResponse": {
      "description": "An CancelInstanceGetResponse response model\n\nReturn cancel instance operation status",
      "headers": {
        "status": {
          "type": "string"
        }
      }
    },
    "categoryDefinitonResponse": {
      "description": "An CategoryDefinitonResponse response model\n\nThis is used to retutn a response of Category as a body",
      "schema": {
        "$ref": "#/definitions/CategoryGetResponse"
      }
    },
    "categoryResponse": {
      "description": "An CategoryResponse response model\n\nThis is used to return response with a single category as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CategoryGetResponse"
        }
      }
    },
    "changeOwnerResponse": {
      "description": "An ChangeOwnerResponse response model\n\nThis is used for returning a response for change owner of entity as body",
      "schema": {
        "$ref": "#/definitions/ChangeOwnerRequest"
      }
    },
    "eventsResponse": {
      "description": "An EventsResponse response model\n\nThis is used for returning a response with a single event as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "getAllTargetGroups": {
      "description": "The TargetGroupAllResponse response model\n\nThis is used for returning a response of target group as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/targetGroupGetAllResponse"
        }
      }
    },
    "getAllTasksResponse": {
      "description": "An GetAllTasksSwaggerResponse model.",
      "schema": {
        "$ref": "#/definitions/GetAllTasksResponse"
      }
    },
    "getDataViewSchemaResponse": {
      "description": "An GetDataViewSchemaResponse response model\n\nThis is used for returning a response of both data and view schema as a body",
      "schema": {
        "$ref": "#/definitions/SchemaByTypeResponse"
      }
    },
    "getInstancesSummaryResponse": {
      "description": "An GetInstancesSummaryResponse model.\n\nIt will return a summary of workflows",
      "schema": {
        "$ref": "#/definitions/instancesSummaryResponse"
      }
    },
    "getSchemaAllResponse": {
      "description": "An GetSchemaAllResponse response model\n\nThis is used for returning a response of schema as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "getSchemaResponse": {
      "description": "An GetSchemaResponse response model\n\nThis is used for returning a response of schema as a body",
      "schema": {
        "$ref": "#/definitions/Schema"
      }
    },
    "getTasksSummaryResponse": {
      "description": "An GetTasksSummaryResponse model.\n\nIt will return a summary of tasks",
      "schema": {
        "$ref": "#/definitions/TasksSummaryResponse"
      }
    },
    "getWorkflowSummaryResponse": {
      "description": "An GetWorkflowSummaryResponse model.\n\nIt will return a summary of workflows",
      "schema": {
        "$ref": "#/definitions/workflowSummaryResponse"
      }
    },
    "noContent": {
      "description": "NoContent response model"
    },
    "readTaskResponse": {
      "description": "An ReadTaskResponse model.",
      "schema": {
        "$ref": "#/definitions/GetApprovalTaskResponse"
      }
    },
    "referenceResponse": {
      "description": "ReferenceResponse response model\n\nThis is used for returning a response with uses and/or usedby",
      "schema": {
        "$ref": "#/definitions/AllReferences"
      }
    },
    "runWorkflowResponse": {
      "description": "An RunWorkflowResponse response model\n\nThis is used for returning a response of workflow as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/StartWorkflowResponse"
        }
      }
    },
    "runtimeUserDefinitonResponse": {
      "description": "RuntimeUserDefinitonResponse response model\n\nThis is used for returning a response with a single runtime user as a body",
      "schema": {
        "$ref": "#/definitions/RuntimeUserDefinitionGetResponse"
      }
    },
    "runtimeUserResponse": {
      "description": "RuntimeUserResponse response model\n\nThis is used for returning a response with a single runtime user as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/RuntimeUserDefinitionGetAllResponse"
        }
      }
    },
    "scheduleDefinitonResponse": {
      "description": "An ScheduleDefinitonResponse response model\n\nThis is used for returning a response of schedule as body",
      "schema": {
        "$ref": "#/definitions/ScheduleGetResponse"
      }
    },
    "scheduleResponse": {
      "description": "An ScheduleResponse response model\n\nThis is used for returning a response with a single schedule as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ScheduleGetAllResponse"
        }
      }
    },
    "schemaPostResponse": {
      "description": "An SchemaPostResponse response model\n\nThis is used for returning a response of schema as body",
      "schema": {
        "$ref": "#/definitions/SchemaNewPostResponse"
      }
    },
    "shareObjectPermissionsResponse": {
      "description": "An ShareObjectPermissionsResponse response model\n\nThis is used for returning a response for sharing of object permissions for user and groups",
      "schema": {
        "$ref": "#/definitions/ShareObjectPermissions"
      }
    },
    "startWorklfowCfgResponse": {
      "description": "An StartWorklfowCfgResponse response model\n\nThis is used for returning a response of the workflow required parameters",
      "schema": {
        "$ref": "#/definitions/StartWorklfowConfigResponse"
      }
    },
    "tableResponse": {
      "description": "A TableResponse model\n\nThis is used for returning a response of Table as a body",
      "schema": {
        "$ref": "#/definitions/TableGetResponse"
      }
    },
    "tableTypeGetAllResponse": {
      "description": "A TableTypeGetAllResponse model\n\nThis is used for returning a response of Target Type as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CreateTableTypeGetResponse"
        }
      }
    },
    "tableTypeGetResponse": {
      "description": "A TableTypeGetResponse model\n\nThis is used for returning a response of Target Type as a body",
      "schema": {
        "$ref": "#/definitions/CreateTableTypeGetResponse"
      }
    },
    "tableTypeSchemaGetResponse": {
      "description": "A TableTypeSchemaGetResponse model\n\nThis is used for returning a response of Target Type as a body",
      "schema": {
        "$ref": "#/definitions/TableTypeSchemaResponse"
      }
    },
    "targetDefinitonAllResponse": {
      "description": "The TargetDefinitonAllResponse response model\n\nThis is used for returning a response of Targets as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/TargetDefinitionGetAllResponse"
        }
      }
    },
    "targetDefinitonResponse": {
      "description": "The TargetDefinitonResponse response model\n\nThis is used for returning a response of Target as body",
      "schema": {
        "$ref": "#/definitions/TargetDefinitionGetResponse"
      }
    },
    "targetGroupGetResponse": {
      "description": "An TargetGroupResponse response model\n\nThis is used for returning a response for target group as body",
      "schema": {
        "$ref": "#/definitions/targetGroupGetResponse"
      }
    },
    "tenantGetAllResponse": {
      "description": "An TenantGetAllResponse response model\n\nThis is used for returning a response of Tenant and Its sub tenants as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Tenant"
        }
      }
    },
    "tenantResponse": {
      "description": "The TenantResponse response model\n\nThis is used for returning a response of Tenant as body",
      "schema": {
        "$ref": "#/definitions/Tenant"
      }
    },
    "triggerGetAllResponse": {
      "description": "An TriggerGetAllResponse response model\n\nThis is used for returning a response of Trigger as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Trigger"
        }
      }
    },
    "triggerGetResponse": {
      "description": "An TriggerGetResponse response model\n\nThis is used for returning a response of Trigger as a body",
      "schema": {
        "$ref": "#/definitions/Trigger"
      }
    },
    "validationError": {
      "description": "A Error is a swagger response to represent error",
      "headers": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "variableDefinitonResponse": {
      "description": "VariableDefinitonResponse An VariableDefinitonResponse response model\n\nThis is used for returning a response of Variable as body",
      "schema": {
        "$ref": "#/definitions/VariableGetResponse"
      }
    },
    "variableResponse": {
      "description": "An VariableResponse response model\n\nThis is used for returning a response with a single variable as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/VariableGetAllResponse"
        }
      }
    },
    "wfInstanceGetResponse": {
      "description": "An WFInstanceGetResponse response model\n\nThis is used for returning a response of workflow instance",
      "schema": {
        "$ref": "#/definitions/WorkflowInstanceGetAllResponse"
      }
    },
    "wfInstanceResponse": {
      "description": "An WFInstanceResponse response model\n\nThis is used for returning a response with a workflow instance as body",
      "schema": {
        "$ref": "#/definitions/WFInstancePaginationResponse"
      }
    },
    "wfInstanceResponseV1": {
      "description": "An WFInstanceResponseV1 response model\n\nThis is used for returning a response with a workflow instance as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/WorkflowInstanceGetAllResponse"
        }
      }
    },
    "workflowActionInstanceResponse": {
      "description": "An WorkflowActionInstanceResponse response model\n\nThis is used for returning a response of action instance as body",
      "schema": {
        "$ref": "#/definitions/ActionInstanceGetResponse"
      }
    },
    "workflowBatchGetResponse": {
      "description": "An WorkflowBatchGetResponse response model\n\nThis is used for returning a response of list of workflows as body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/WorkflowDefinitionGetAllResponse"
        }
      }
    },
    "workflowDefinitonResponse": {
      "description": "A WorkflowDefinitonResponse model\n\nThis is used for returning a response of Workflow as a body",
      "schema": {
        "$ref": "#/definitions/workflowDefinitionGetResponse"
      }
    },
    "workflowInstanceDeleteResponse": {
      "description": "An WorkflowInstanceDeleteResponse response model\n\nReturns message not marked for deletion if workflow instances are in running state",
      "headers": {
        "message": {
          "type": "string"
        }
      }
    },
    "workflowInstanceResponse": {
      "description": "An WorkflowInstanceResponse response model\n\nThis is used for returning a response of workflow instance as body",
      "schema": {
        "$ref": "#/definitions/WorkflowInstanceGetResponse"
      }
    },
    "workflowResponse": {
      "description": "An WorkflowResponse response model\n\nThis is used for returning a response with a single workflow as a body",
      "schema": {
        "$ref": "#/definitions/WorkflowGetAllPaginationResponse"
      }
    },
    "workflowResponseV1": {
      "description": "An WorkflowResponseV1 response model\n\nThis is used for returning a response with a single workflow as a body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/WorkflowDefinitionGetAllResponse"
        }
      }
    },
    "workflowUpdateResponse": {
      "description": "A WorkflowUpdateResponse model\n\nThis is used for returning a response of Workflow as a body",
      "schema": {
        "$ref": "#/definitions/WorkflowDefinitionPutResponse"
      }
    },
    "workflowValidationResponse": {
      "description": "An WorkflowValidationResponse response model\n\nThis is used for returning a response of action definiton as a body",
      "schema": {
        "$ref": "#/definitions/WorkflowValidationGetResponse"
      }
    }
  }
}
